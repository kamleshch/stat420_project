car::vif(mod_a)
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
mod_a=lm(Balance ~ Income + Limit  + Cards + Age + Income:Student +
Limit:Student,data = Credit)
car::vif(mod_a)
mod_a=lm(Balance ~ Income + Limit  + Cards + Age + Income:Student ,data = Credit)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
pairs(Credir)
pairs(Credit)
mod_base = lm (Balance ~ .^3 , data = Credit)
find_model=step(mod_base,direction = "backward",k=log(n))
mod_a
mod_a=lm(find_model ,data = Credit)
car::vif(mod_a)
mod_base = lm (Balance ~ .^2 , data = Credit)
car::vif(mod_base)
mod_base = lm (Balance ~ .^2 , data = Credit)
find_model=step(mod_base,direction = "backward",k=log(n))
mod_a=lm(find_model ,data = Credit)
car::vif(mod_a)
find_model
car::vif(find_model)
mod_a=lm(Balance ~ Income + Rating + Cards + Age +
Student + Income:Rating + Income:Student + Limit:Rating +
Limit:Student ,data = Credit)
car::vif(mod_a)
mod_a=lm(Balance ~   Rating + Cards + Age +
Student + Income:Rating + Income:Student + Limit:Rating +
Limit:Student ,data = Credit)
car::vif(mod_a)
mod_a=lm(Balance ~   Rating + Cards + Age +
Student + Income:Rating + Income:Student +
Limit:Student ,data = Credit)
car::vif(mod_a)
mod_a=lm(Balance ~   Rating + Cards + Age +
Student + Income:Rating + Income:Student +
Limit:Student ,data = Credit)
car::vif(mod_a)
mod_a=lm(Balance ~   Rating + Cards + Age +
Student + Income:Rating + Income:Student  ,data = Credit)
car::vif(mod_a)
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
get_bp_decision(mod_a, alpha = 0.05)
get_bp_decision(mod_a, alpha = 0.15)
get_bp_decision(mod_a, alpha = 0.50)
get_bp_decision(mod_a, alpha = 0.90)
get_bp_decision(mod_a, alpha = 0.001)
bptest(mod_a)$p.value
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
abline(h=0,col="darkorange",lwd=2)
mod_base = lm (Balance ~ .^2 , data = Credit)
find_model=step(mod_base,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
car::vif(mod_a)
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
abline(h=0,col="darkorange",lwd=2)
mod_base = lm (Balance ~ .^2 , data = Credit)
find_model=step(mod_base,direction = "both")
mod_base = lm (Balance ~ . , data = Credit)
find_model=step(mod_base,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
mod_base = lm (Balance ~ ^3 , data = Credit)
find_model=step(mod_base,direction = "both",k=log(n))
mod_base = lm (Balance ~ .^3 , data = Credit)
find_model=step(mod_base,direction = "both",k=log(n))
mod_base = lm (Balance ~ 1 , data = Credit)
find_model=step(mod_base,direction = "both",k=log(n))
n=nrow(Credit)
mod_base = lm (Balance ~ 1 , data = Credit)
find_model=step(mod_base,scope=Balance~.^3,direction = "both",k=log(n))
find_model=step(mod_base,scope=Balance~.^3,direction = "forward",k=log(n))
names(Credit)
str(Credit)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Gender)^2,direction = "both",k=log(n))
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Gender)^2,direction = "both",k=log(n))
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Gender)^2,direction = "forward",k=log(n))
mod_base = lm (Balance ~ 1 , data = Credit)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Gender)^2,direction = "forward",k=log(n))
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Gender+Age)^2,direction = "forward",k=log(n))
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Gender+Age+Income)^2,direction = "forward",k=log(n))
mod_a=lm(find_model ,data = Credit)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
abline(h=0,col="darkorange",lwd=2)
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
bptest(mmod_a)$p.value
bptest(mod_a)$p.value
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Gender+Age+Income)^2,direction = "forward",k=log(n))
mod_a=lm(find_model ,data = Credit)
car::vif(mod_a)
find_model
names(Credit)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Gender+Age+Income+Cards)^2,direction = "forward",k=log(n))
find_model
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
abline(h=0,col="darkorange",lwd=2)
summary(mod_a)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+Income+Cards)^2,direction = "forward",k=log(n))
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+Income+Cards)^2,direction = "both",k=log(n))
find_model
names(Credit)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+Income+Cards+Education)^2,direction = "both",k=log(n))
names(Credit)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+Income+Cards+Limit)^2,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
boxplot(Credit$Limit)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+Income+Cards+log(Limit))^2,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
find_model
boxplot(Credit$Limit)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+Income+Cards)^3,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
abline(h=0,col="darkorange",lwd=2)
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
boxplot(Income)
boxplot(Credit$Income)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+log(Income)+Cards)^3,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
abline(h=0,col="darkorange",lwd=2)
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
boxplot(Credit$Cards)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+log(Income)+log(Cards))^3,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+log(Income))^3,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
find_model=step(mod_base,scope=Balance~(Ethnicity+Married+Student+Age+log(Income))^4,direction = "both",k=log(n))
model_formula = formula(Balance + (Ethnicity+Married+Student+Age+log(Income))^4)
model_formula = formula(Balance + (Ethnicity+Married+Student+Age+log(Income))^4,data= Credit)
model_formula = formula(Balance ~ (Ethnicity+Married+Student+Age+log(Income))^4,data= Credit)
model_formula
model_formula = formula(Balance ~ (Ethnicity*Married*Student*Age*log(Income)),data= Credit)
find_model=step(mod_base,scope=model_formula^4,direction = "both",k=log(n))
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
boxplot(Credit$Age)
pair(Credit)
pairs(Credit)
boxplot(Credit$Rating)
mod_base = lm (Balance ~ 1 , data = Credit)
model_formula = formula(Balance ~ (Ethnicity*Married*Student*Age*log(Rating)),data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
model_formula = formula(Balance ~ (Ethnicity*Married*Student*Age*Rating),data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
pairs(Credit)
model_formula = formula(Balance ~ (Ethnicity*Married*Student*Age*Limit),data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
car::vif(mod_a)
model_formula = formula(Balance ~ (Ethnicity*Married*Student*Limit),data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
find_model
model_formula = formula(Balance ~ (Ethnicity*Married*Student*Limit)^2,data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
model_formula = formula(Balance ~ Student,data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
model_formula = formula(Balance ~ Student+Cards,data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
model_formula = formula(Balance ~ Student+log(Limit),data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
model_formula = formula(Balance ~ Student+log(Rating),data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
```{r}
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
model_formula = formula(Balance ~ Student+log(Income),data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
```{r}
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
model_formula = formula(Balance ~ Student+log(Income)+I(Income)^2,data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
```{r}
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
model_formula = formula(Balance ~ Student+log(Income)+I(log(Income))^2,data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
get_loocv_rmse(mod_a)
get_adj_r2(mod_a)
get_bp_decision(mod_a, alpha = 0.01)
get_num_params(mod_a)
model_formula = formula(Balance ~ Student+I(log(Income))^2,data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
setwd("~/Downloads/stat420_project-master")
sac_trn_data
# Chunk 1: setup
options(scipen = 1, digits = 4, width = 80, fig.align = "center")
# Chunk 2
library(tidyverse)
library(lmtest)
# Chunk 4
pairs(longley,col="dodgerblue")
# Chunk 5
cor_longley = cor(longley)
cor_longley[lower.tri(cor_longley)] = NA
cor_longley %>%
data.frame() %>%
mutate(var1=row.names(.)) %>%
gather(var2,corr,-var1) %>%
na.omit() %>%
filter(abs(corr) != 1) %>%
arrange(-abs(corr))
# Chunk 6
model_1b = lm(Employed ~ . , data = longley)
sort(car::vif(model_1b),decreasing = TRUE)
# Chunk 7
model_1c = lm(Population  ~ .-Employed, data = longley)
summary(model_1c)$r.squared
# Chunk 8
model = lm(Employed ~ .-Population , data =longley)
model_pop = lm(Population  ~ .-Employed, data = longley)
cor(resid(model),resid(model_pop))
# Chunk 9
summary(model_1b)
# Chunk 10
model_1e = lm(Employed ~ Unemployed + Armed.Forces+Year, data = longley)
car::vif(model_1e)
# Chunk 11
anova(model_1e,model_1b)
# Chunk 12
plot(fitted(model_1e),resid(model_1e),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
abline(h=0,col="darkorange",lwd=2)
# Chunk 13
bptest(model_1e)
# Chunk 14
qqnorm(resid(model_1e))
qqline(resid(model_1e))
# Chunk 15
shapiro.test(resid(model_1e))
# Chunk 16
plot_fitted_resid = function(model, pointcol = "dodgerblue", linecol = "darkorange") {
plot(fitted(model), resid(model),
col = pointcol, pch = 20, cex = 1.5,
xlab = "Fitted", ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
plot_qq = function(model, pointcol = "dodgerblue", linecol = "darkorange") {
qqnorm(resid(model), col = pointcol, pch = 20, cex = 1.5)
qqline(resid(model), col = linecol, lwd = 2)
}
# Chunk 17
library(ISLR)
data(Credit)
Credit = subset(Credit, select = -c(ID))
# Chunk 18
n=nrow(Credit)
mod_base = lm (Balance ~ 1 , data = Credit)
model_formula = formula(Balance ~ Student+I(log(Income))^2,data= Credit)
find_model=step(mod_base,scope=model_formula,direction = "both",k=log(n))
mod_a=lm(find_model ,data = Credit)
summary(mod_a)
car::vif(mod_a)
# Chunk 19
plot(fitted(mod_a),resid(mod_a),xlab="Fitted",ylab="Residuals",main=" Fitted Vs Residual")
abline(h=0,col="darkorange",lwd=2)
# Chunk 20
library(lmtest)
get_bp_decision = function(model, alpha) {
decide = unname(bptest(model)$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_sw_decision = function(model, alpha) {
decide = unname(shapiro.test(resid(model))$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_num_params = function(model) {
length(coef(model))
}
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
get_adj_r2 = function(model) {
summary(model)$adj.r.squared
}
# Chunk 22
library(lmtest)
get_bp_decision = function(model, alpha) {
decide = unname(bptest(model)$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_sw_decision = function(model, alpha) {
decide = unname(shapiro.test(resid(model))$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_num_params = function(model) {
length(coef(model))
}
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
get_adj_r2 = function(model) {
summary(model)$adj.r.squared
}
# Chunk 24
library(caret)
library(ggplot2)
data(Sacramento)
sac_data = Sacramento
sac_data$limits = factor(ifelse(sac_data$city == "SACRAMENTO", "in", "out"))
sac_data = subset(sac_data, select = -c(city, zip))
# Chunk 25
qplot(y = longitude, x = latitude, data = sac_data,
col = limits, main = "Sacramento City Limits ")
# Chunk 26
set.seed(420)
sac_trn_idx  = sample(nrow(sac_data), size = trunc(0.80 * nrow(sac_data)))
sac_trn_data = sac_data[sac_trn_idx, ]
sac_tst_data = sac_data[-sac_trn_idx, ]
sac_trn_data
model = lm(price ~ ., data = sac_trn_data)
model
summary(model)
calc_loocv_rmse(model)
calc_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
calc_loocv_rmse(model)
summary(sac_trn_data)
model = lm(price ~ beds + type + limits, data = sac_trn_data)
calc_loocv_rmse(model)
model = lm(price ~ ., data = sac_trn_data)
summary(model)
car::vif(model)
model = lm(price ~ . , data = sac_trn_data)
step(model, direction = "backward",k = log(n))
n= nrow(sac_trn_data)
select_model = step(model, direction = "backward",k = log(n))
model = lm(select_model, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
select_model = step(model, direction = "backward",k = 2)
model = lm(select_model, data = sac_trn_data)
calc_loocv_rmse(model)
full_model = lm(price ~ .^2 , data = sac_trn_data)
select_model = step(full_model, direction = "backward",k = log(n))
model = lm(select_model, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
summary(model)
model = lm(price ~ sqft + longitude + limits, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
model = lm(price ~ sqft + longitude + limits + beds:longitude, data = sac_trn_data)
calc_loocv_rmse(model)
model = lm(price ~ sqft + longitude + limits + longitude:limits, data = sac_trn_data)
calc_loocv_rmse(model)
model = lm(price ~ sqft + longitude + limits + beds:longitude, data = sac_trn_data)
calc_loocv_rmse(model)
model = lm(price ~ sqft + longitude + limits + beds:longitude, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
model = lm(price ~ sqft + longitude + limits + beds, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
model = lm(price ~ sqft + longitude + limits + sqft:longitude, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
model = lm(price ~ sqft + longitude + limits + sqft:limits, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
names(sac_trn_data)
model = lm(price ~ sqft + longitude + limits + type, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
full_model = lm(price ~ .^3 , data = sac_trn_data)
select_model = step(full_model, direction = "backward",k = log(n))
model = lm(select_model, data = sac_trn_data)
calc_loocv_rmse(model)
model
full_model = lm(price ~ .^2 , data = sac_trn_data)
select_model = step(full_model, direction = "backward",k = log(n))
model = lm(select_model, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
model = lm(price ~ beds + sqft + longitude + limits + beds:sqft + beds:longitude, data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
model = lm(price ~ beds + sqft + longitude + limits + beds:sqft , data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
model = lm(price ~ beds + sqft + longitude + limits +beds:sqft +longitude:limits , data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
n= nrow(sac_trn_data)
full_model = lm(price ~ .^2 , data = sac_trn_data)
selected_model = step(full_model, direction = "backward",k = log(n))
model = lm(selected_model , data = sac_trn_data)
calc_loocv_rmse(model)
car::vif(model)
summary(model)
5144-151
setwd("~/GitHub/stat420_project")
head(lcf_data) %>%
kable() %>% kable_styling(c("striped","bordered"))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
library(kableExtra)
# Chunk 3
lcf_data = read.table("icfforworkbook.tab", sep = "\t", header = TRUE)
head(lcf_data) %>%
kable() %>% kable_styling(c("striped","bordered"))
tinytex::reinstall_tinytex()
